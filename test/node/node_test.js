// Generated by CoffeeScript 1.4.0
(function() {
  var Specification, block, contextName, data, filename, files, fs, group, name, path, root, setupBlock, spec, testBody, testDirectories, testDirectory, testName, tests, _fn, _i, _j, _len, _len1;

  fs = require('fs');

  path = require('path');

  root = path.normalize(path.join(__dirname, '../..'));

  files = ['globalization/en-US.js', 'core.js', 'sugarpak.js', 'parser.js'];

  for (_i = 0, _len = files.length; _i < _len; _i++) {
    filename = files[_i];
    data = fs.readFileSync(path.join(root, 'src', filename), 'utf-8');
    eval(data);
  }

  Specification = (function() {

    function Specification(spec) {
      this.spec = spec;
    }

    return Specification;

  })();

  testDirectories = ['core', 'date', 'date_and_time', 'date_math', 'dst', 'parseExact', 'partial', 'relative', 'relative_date_and_time', 'rememberthemilk', 'ruby_chronic', 'sugarpak', 'time', 'tostring'];

  for (_j = 0, _len1 = testDirectories.length; _j < _len1; _j++) {
    testDirectory = testDirectories[_j];
    data = fs.readFileSync(path.join(root, 'test', testDirectory, 'index.js'), 'utf-8');
    eval(data);
    spec = Date.Specification.spec;
    Date.Specification = void 0;
    for (contextName in spec) {
      tests = spec[contextName];
      group = exports["" + testDirectory + ": " + contextName] = {};
      setupBlock = ((function() {
        var _results;
        _results = [];
        for (name in tests) {
          block = tests[name];
          if (name === 'setup') {
            _results.push(block);
          }
        }
        return _results;
      })())[0];
      _fn = function(contextName, setupBlock, testName, testBody) {
        return group[testName] = function(test) {
          if (setupBlock) {
            setupBlock.call(this);
          }
          if (testBody.run) {
            testBody.run.call(this);
          }
          if (contextName === 'Fail') {
            test.equal(false, testBody.assert.call(this), "\n      " + String(testBody.assert));
          } else {
            test.ok(testBody.assert.call(this), "\n      " + String(testBody.assert));
          }
          return test.done();
        };
      };
      for (testName in tests) {
        testBody = tests[testName];
        if (testName === 'setup') {
          continue;
        }
        _fn(contextName, setupBlock, testName, testBody);
      }
    }
  }

}).call(this);
